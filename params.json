{"name":"Angular-formly-transformer","tagline":"Field configuration transformer for Angular Formly","body":"FormlyTransformer\r\n==========\r\n\r\nAutomate configuration of fields in [Angular-Formly].\r\n\r\n## Add Angular Formly\r\n\r\nThere is no official [Angular-Formly] package in Atmosphere so you have to add it manually.\r\n\r\n## Install\r\n\r\n```\r\nmeteor add wieldo:angular-formly-transformer\r\n```\r\n\r\n\r\n## Getting Started\r\n\r\n1. Add package using `meteor add` (see above)\r\n2. Add angular-formly files to your project\r\n3. Add the following dependencies to your AngularJS module:\r\n\r\n```javascript\r\nangular.module('myApp', [\r\n    'formly',\r\n    'formlyTransformer'\r\n  ])\r\n```\r\n\r\n## How to use it\r\n\r\n### Register transformer\r\n\r\nEach transform function has two arguments.\r\n\r\n- **field** - formly field object\r\n- **config** - transform configuration for field\r\n\r\n```javascript\r\nformlyTransformer.register('transformerName', function(field, config) {\r\n    // field - formly configuration for field\r\n    // config - transformer configuration for field\r\n});\r\n```\r\n\r\n### Use transformer\r\n\r\nYou have to specify two arguments. Array of fields and configuration.\r\n\r\nConfiguration structure is simple.  \r\nUse field's key as property key.  \r\nThen specify transformers as transformer name-config pairs.\r\n\r\n```javascript\r\nformlyTransformer.transform(vm.fields, {\r\n    fieldKey: {\r\n        transformerName: transformerConfig\r\n    }\r\n});\r\n```\r\n\r\n\r\n## Example\r\n\r\n```javascript\r\nangular.module('myAppName', [\r\n    'formly',\r\n    'formlyTransformer'\r\n  ])\r\n  .controller('demoCtrl', demoCtrl);\r\n  \r\n  function demoCtrl(formlyTransformer) {\r\n        var vm = this;\r\n        \r\n        // register upperCaseLabel transformer\r\n        formlyTransformer.register('upperCaseLabel', function(field, config) {\r\n            // there is no label!\r\n            if (!field.templateOptions && !field.templateOptions.label) {\r\n                return;\r\n            }\r\n            // yes, there is!\r\n            if(config === true) {\r\n                field.templateOptions.label = field.templateOptions.label.toUpperCase();\r\n            }\r\n        });\r\n        \r\n        vm.fields = [\r\n            key: 'firstName',\r\n            type: 'input',\r\n            templateOptions: {\r\n                label: 'First name'\r\n            }\r\n        ];\r\n        \r\n        console.log('before', vm.fields[0].templateOptions.label); // First name\r\n        \r\n        formlyTransformer.transform(vm.fields, {\r\n            firstName: {\r\n                upperCaseLabel: true\r\n            }\r\n        });\r\n        \r\n        console.log('after', vm.fields[0].templateOptions.label); // FIRST NAME\r\n  }\r\n```\r\n\r\n## Roadmap\r\n- use formlyConfig.extras.fieldTransform\r\n\r\n[Angular-Formly]: http://angular-formly.com\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/wieldo/angular-formly-transformer/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")","google":"UA-69932737-1","note":"Don't delete this file! It's used internally to help with page regeneration."}